{ _readableState:
   { highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: false,
     ended: true,
     endEmitted: true,
     reading: false,
     calledRead: true,
     sync: false,
     needReadable: true,
     emittedReadable: false,
     readableListening: false,
     objectMode: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  domain: null,
  _events: { readable: [Function] },
  _maxListeners: 10,
  socket:
   { _connecting: false,
     _handle:
      { fd: 14,
        writeQueueSize: 0,
        owner: { '$ref': '$["socket"]' },
        onread: [Function: onread],
        reading: true },
     _readableState:
      { highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: false,
        ended: false,
        endEmitted: false,
        reading: true,
        calledRead: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        objectMode: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: { [Function: g] listener: [Function: onend] },
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain:
         [ [Function: ondrain],
           [Function: socketOnDrain] ],
        timeout: [Function],
        error: [Function],
        close:
         [ [Function: serverSocketCloseListener],
           [Function: onServerResponseClose] ] },
     _maxListeners: 10,
     _writableState:
      { highWaterMark: 16384,
        objectMode: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        buffer: [],
        errorEmitted: false },
     writable: true,
     allowHalfOpen: true,
     onend: [Function],
     destroyed: false,
     bytesRead: 342,
     _bytesDispatched: 0,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      { domain: null,
        _events:
         { request:
            { [Function]
              init: [Function],
              defaultConfiguration: [Function],
              lazyrouter: [Function],
              handle: [Function],
              use: [Function: use],
              route: [Function],
              engine: [Function],
              param: [Function],
              set: [Function],
              path: [Function],
              enabled: [Function],
              disabled: [Function],
              enable: [Function],
              disable: [Function],
              get: [Function],
              post: [Function],
              put: [Function],
              head: [Function],
              delete: [Function],
              options: [Function],
              trace: [Function],
              copy: [Function],
              lock: [Function],
              mkcol: [Function],
              move: [Function],
              purge: [Function],
              propfind: [Function],
              proppatch: [Function],
              unlock: [Function],
              report: [Function],
              mkactivity: [Function],
              checkout: [Function],
              merge: [Function],
              'm-search': [Function],
              notify: [Function],
              subscribe: [Function],
              unsubscribe: [Function],
              patch: [Function],
              search: [Function],
              connect: [Function],
              all: [Function],
              del: [Function],
              render: [Function],
              listen: [Function],
              setMaxListeners: [Function: setMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              once: [Function: once],
              removeListener: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              request: { app: [Circular] },
              response: { app: [Circular] },
              cache: {},
              settings:
               { 'x-powered-by': true,
                 etag: 'weak',
                 'etag fn': [Function: wetag],
                 env: 'development',
                 'query parser': 'extended',
                 'query parser fn': [Function],
                 'subdomain offset': 2,
                 'trust proxy': false,
                 'trust proxy fn': [Function: trustNone],
                 view: [Function: View],
                 views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                 'jsonp callback name': 'callback' },
              engines: {},
              _events: { mount: [Function] },
              locals:
               { settings:
                  { 'x-powered-by': true,
                    etag: 'weak',
                    'etag fn': [Function: wetag],
                    env: 'development',
                    'query parser': 'extended',
                    'query parser fn': [Function],
                    'subdomain offset': 2,
                    'trust proxy': false,
                    'trust proxy fn': [Function: trustNone],
                    view: [Function: View],
                    views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                    'jsonp callback name': 'callback' } },
              mountpath: '/',
              _router:
               { [Function: router]
                 params: {},
                 _params: [],
                 caseSensitive: false,
                 mergeParams: undefined,
                 strict: false,
                 stack:
                  [ { handle: [Function: query],
                      name: 'query',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    { handle: [Function: expressInit],
                      name: 'expressInit',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    { handle: [Function: jsonParser],
                      name: 'jsonParser',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined },
                    { handle: [Function: mounted_app],
                      name: 'mounted_app',
                      params: {},
                      path: '',
                      keys: [],
                      regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                      route: undefined } ] } },
           connection: [Function: connectionListener],
           clientError: [Function] },
        _maxListeners: 10,
        _connections: 1,
        connections: 1,
        _handle:
         { fd: 12,
           writeQueueSize: 0,
           onconnection: [Function: onconnection],
           owner: { '$ref': '$["socket"]["server"]' } },
        _usingSlaves: false,
        _slaves: [],
        allowHalfOpen: true,
        httpAllowHalfOpen: false,
        timeout: 120000,
        _connectionKey: '4:0.0.0.0:0' },
     _idleTimeout: 120000,
     _idleNext:
      { [Function: utcDate]
        _onTimeout: [Function],
        _idleTimeout: 271,
        _idleNext:
         { _idleNext:
            { _connecting: false,
              _handle:
               { fd: 14,
                 writeQueueSize: 0,
                 owner: [Circular],
                 onread: [Function: onread],
                 reading: true },
              _readableState:
               { highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: false,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 calledRead: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 objectMode: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events:
               { end: { [Function: g] listener: [Function: onend] },
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain:
                  [ [Function: ondrain],
                    [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function],
                 close:
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ] },
              _maxListeners: 10,
              _writableState:
               { highWaterMark: 16384,
                 objectMode: false,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 sync: true,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 buffer: [],
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              onend: [Function],
              destroyed: false,
              bytesRead: 342,
              _bytesDispatched: 0,
              _pendingData: null,
              _pendingEncoding: '',
              server:
               { domain: null,
                 _events:
                  { request:
                     { [Function]
                       init: [Function],
                       defaultConfiguration: [Function],
                       lazyrouter: [Function],
                       handle: [Function],
                       use: [Function: use],
                       route: [Function],
                       engine: [Function],
                       param: [Function],
                       set: [Function],
                       path: [Function],
                       enabled: [Function],
                       disabled: [Function],
                       enable: [Function],
                       disable: [Function],
                       get: [Function],
                       post: [Function],
                       put: [Function],
                       head: [Function],
                       delete: [Function],
                       options: [Function],
                       trace: [Function],
                       copy: [Function],
                       lock: [Function],
                       mkcol: [Function],
                       move: [Function],
                       purge: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       unlock: [Function],
                       report: [Function],
                       mkactivity: [Function],
                       checkout: [Function],
                       merge: [Function],
                       'm-search': [Function],
                       notify: [Function],
                       subscribe: [Function],
                       unsubscribe: [Function],
                       patch: [Function],
                       search: [Function],
                       connect: [Function],
                       all: [Function],
                       del: [Function],
                       render: [Function],
                       listen: [Function],
                       setMaxListeners: [Function: setMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       once: [Function: once],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       request: { app: [Circular] },
                       response: { app: [Circular] },
                       cache: {},
                       settings:
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                          'jsonp callback name': 'callback' },
                       engines: {},
                       _events: { mount: [Function] },
                       locals:
                        { settings:
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router:
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack:
                           [ { handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                               route: undefined },
                             { handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                               route: undefined },
                             { handle: [Function: jsonParser],
                               name: 'jsonParser',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                               route: undefined },
                             { handle: [Function: mounted_app],
                               name: 'mounted_app',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                               route: undefined } ] } },
                    connection: [Function: connectionListener],
                    clientError: [Function] },
                 _maxListeners: 10,
                 _connections: 1,
                 connections: [Getter/Setter],
                 _handle:
                  { fd: 12,
                    writeQueueSize: 0,
                    onconnection: [Function: onconnection],
                    owner: [Circular] },
                 _usingSlaves: false,
                 _slaves: [],
                 allowHalfOpen: true,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '4:0.0.0.0:0' },
              _idleTimeout: 120000,
              _idleNext: [Circular],
              _idlePrev: [Circular],
              _idleStart: 1414446075741,
              _monotonicStartTime: 66686409,
              parser:
               { _headers: [],
                 _url: '',
                 onHeaders: [Function: parserOnHeaders],
                 onHeadersComplete: [Function: parserOnHeadersComplete],
                 onBody: [Function: parserOnBody],
                 onMessageComplete: [Function: parserOnMessageComplete],
                 socket: [Circular],
                 incoming:
                  { _readableState:
                     { highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: false,
                       ended: true,
                       endEmitted: true,
                       reading: false,
                       calledRead: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       objectMode: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: false,
                    domain: null,
                    _events: { readable: [Function] },
                    _maxListeners: 10,
                    socket: [Circular],
                    connection: [Circular],
                    httpVersion: '1.1',
                    complete: true,
                    headers:
                     { host: '127.0.0.1:51893',
                       'accept-encoding': 'gzip, deflate',
                       cookie: '',
                       'user-agent': 'node-superagent/0.18.0',
                       'content-type': 'application/json',
                       'content-length': '132',
                       connection: 'close' },
                    trailers: {},
                    _pendings: [],
                    _pendingIndex: 0,
                    url: '/notas/1414446075727',
                    method: 'PUT',
                    statusCode: null,
                    client: [Circular],
                    _consuming: true,
                    _dumped: false,
                    httpVersionMajor: 1,
                    httpVersionMinor: 1,
                    upgrade: false,
                    next: [Function: next],
                    baseUrl: '',
                    originalUrl: '/notas/1414446075727',
                    _parsedUrl:
                     { protocol: null,
                       slashes: null,
                       auth: null,
                       host: null,
                       port: null,
                       hostname: null,
                       hash: null,
                       search: null,
                       query: null,
                       pathname: '/notas/1414446075727',
                       path: '/notas/1414446075727',
                       href: '/notas/1414446075727',
                       _raw: '/notas/1414446075727' },
                    params: { id: '1414446075727' },
                    query: {},
                    res:
                     { domain: null,
                       _events: { finish: [Function] },
                       _maxListeners: 10,
                       output: [],
                       outputEncodings: [],
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: false,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _headerSent: false,
                       _header: '',
                       _hasBody: true,
                       _trailer: '',
                       finished: false,
                       _hangupClose: false,
                       socket: [Circular],
                       connection: [Circular],
                       _headers:
                        { 'x-powered-by': 'Express',
                          'content-type': 'application/json' },
                       _headerNames:
                        { 'x-powered-by': 'X-Powered-By',
                          'content-type': 'Content-Type' },
                       req: [Circular],
                       locals: {} },
                    body:
                     { title: 'Nota actualizada Kwan',
                       description: 'Introduccion a clase',
                       type: 'js',
                       body: 'soy el cuerpo de json',
                       id: 1414446075727 },
                    _body: true,
                    pipe: [Function],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    pause: [Function],
                    resume: [Function],
                    read: [Function],
                    route:
                     { path: '/notas/:id?',
                       stack:
                        [ { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: undefined },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'post' },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'get' },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'put' } ],
                       methods:
                        { _all: true,
                          post: true,
                          get: true,
                          put: true } } },
                 maxHeaderPairs: 2000,
                 onIncoming: [Function] },
              ondata: [Function],
              _paused: false,
              _httpMessage:
               { domain: null,
                 _events: { finish: [Function] },
                 _maxListeners: 10,
                 output: [],
                 outputEncodings: [],
                 writable: true,
                 _last: false,
                 chunkedEncoding: false,
                 shouldKeepAlive: false,
                 useChunkedEncodingByDefault: true,
                 sendDate: true,
                 _headerSent: false,
                 _header: '',
                 _hasBody: true,
                 _trailer: '',
                 finished: false,
                 _hangupClose: false,
                 socket: [Circular],
                 connection: [Circular],
                 _headers:
                  { 'x-powered-by': 'Express',
                    'content-type': 'application/json' },
                 _headerNames:
                  { 'x-powered-by': 'X-Powered-By',
                    'content-type': 'Content-Type' },
                 req:
                  { _readableState:
                     { highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: false,
                       ended: true,
                       endEmitted: true,
                       reading: false,
                       calledRead: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       objectMode: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: false,
                    domain: null,
                    _events: { readable: [Function] },
                    _maxListeners: 10,
                    socket: [Circular],
                    connection: [Circular],
                    httpVersion: '1.1',
                    complete: true,
                    headers:
                     { host: '127.0.0.1:51893',
                       'accept-encoding': 'gzip, deflate',
                       cookie: '',
                       'user-agent': 'node-superagent/0.18.0',
                       'content-type': 'application/json',
                       'content-length': '132',
                       connection: 'close' },
                    trailers: {},
                    _pendings: [],
                    _pendingIndex: 0,
                    url: '/notas/1414446075727',
                    method: 'PUT',
                    statusCode: null,
                    client: [Circular],
                    _consuming: true,
                    _dumped: false,
                    httpVersionMajor: 1,
                    httpVersionMinor: 1,
                    upgrade: false,
                    next: [Function: next],
                    baseUrl: '',
                    originalUrl: '/notas/1414446075727',
                    _parsedUrl:
                     { protocol: null,
                       slashes: null,
                       auth: null,
                       host: null,
                       port: null,
                       hostname: null,
                       hash: null,
                       search: null,
                       query: null,
                       pathname: '/notas/1414446075727',
                       path: '/notas/1414446075727',
                       href: '/notas/1414446075727',
                       _raw: '/notas/1414446075727' },
                    params: { id: '1414446075727' },
                    query: {},
                    res: [Circular],
                    body:
                     { title: 'Nota actualizada Kwan',
                       description: 'Introduccion a clase',
                       type: 'js',
                       body: 'soy el cuerpo de json',
                       id: 1414446075727 },
                    _body: true,
                    pipe: [Function],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    pause: [Function],
                    resume: [Function],
                    read: [Function],
                    route:
                     { path: '/notas/:id?',
                       stack:
                        [ { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: undefined },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'post' },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'get' },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'put' } ],
                       methods:
                        { _all: true,
                          post: true,
                          get: true,
                          put: true } } },
                 locals: {} } },
           _idlePrev: [Circular] },
        _idlePrev:
         { _connecting: false,
           _handle:
            { fd: 14,
              writeQueueSize: 0,
              owner: [Circular],
              onread: [Function: onread],
              reading: true },
           _readableState:
            { highWaterMark: 16384,
              buffer: [],
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: false,
              ended: false,
              endEmitted: false,
              reading: true,
              calledRead: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              objectMode: false,
              defaultEncoding: 'utf8',
              ranOut: false,
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           domain: null,
           _events:
            { end: { [Function: g] listener: [Function: onend] },
              finish: [Function: onSocketFinish],
              _socketEnd: [Function: onSocketEnd],
              drain:
               [ [Function: ondrain],
                 [Function: socketOnDrain] ],
              timeout: [Function],
              error: [Function],
              close:
               [ [Function: serverSocketCloseListener],
                 [Function: onServerResponseClose] ] },
           _maxListeners: 10,
           _writableState:
            { highWaterMark: 16384,
              objectMode: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function],
              writecb: null,
              writelen: 0,
              buffer: [],
              errorEmitted: false },
           writable: true,
           allowHalfOpen: true,
           onend: [Function],
           destroyed: false,
           bytesRead: 342,
           _bytesDispatched: 0,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            { domain: null,
              _events:
               { request:
                  { [Function]
                    init: [Function],
                    defaultConfiguration: [Function],
                    lazyrouter: [Function],
                    handle: [Function],
                    use: [Function: use],
                    route: [Function],
                    engine: [Function],
                    param: [Function],
                    set: [Function],
                    path: [Function],
                    enabled: [Function],
                    disabled: [Function],
                    enable: [Function],
                    disable: [Function],
                    get: [Function],
                    post: [Function],
                    put: [Function],
                    head: [Function],
                    delete: [Function],
                    options: [Function],
                    trace: [Function],
                    copy: [Function],
                    lock: [Function],
                    mkcol: [Function],
                    move: [Function],
                    purge: [Function],
                    propfind: [Function],
                    proppatch: [Function],
                    unlock: [Function],
                    report: [Function],
                    mkactivity: [Function],
                    checkout: [Function],
                    merge: [Function],
                    'm-search': [Function],
                    notify: [Function],
                    subscribe: [Function],
                    unsubscribe: [Function],
                    patch: [Function],
                    search: [Function],
                    connect: [Function],
                    all: [Function],
                    del: [Function],
                    render: [Function],
                    listen: [Function],
                    setMaxListeners: [Function: setMaxListeners],
                    emit: [Function: emit],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    once: [Function: once],
                    removeListener: [Function: removeListener],
                    removeAllListeners: [Function: removeAllListeners],
                    listeners: [Function: listeners],
                    request: { app: [Circular] },
                    response: { app: [Circular] },
                    cache: {},
                    settings:
                     { 'x-powered-by': true,
                       etag: 'weak',
                       'etag fn': [Function: wetag],
                       env: 'development',
                       'query parser': 'extended',
                       'query parser fn': [Function],
                       'subdomain offset': 2,
                       'trust proxy': false,
                       'trust proxy fn': [Function: trustNone],
                       view: [Function: View],
                       views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                       'jsonp callback name': 'callback' },
                    engines: {},
                    _events: { mount: [Function] },
                    locals:
                     { settings:
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                          'jsonp callback name': 'callback' } },
                    mountpath: '/',
                    _router:
                     { [Function: router]
                       params: {},
                       _params: [],
                       caseSensitive: false,
                       mergeParams: undefined,
                       strict: false,
                       stack:
                        [ { handle: [Function: query],
                            name: 'query',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                            route: undefined },
                          { handle: [Function: expressInit],
                            name: 'expressInit',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                            route: undefined },
                          { handle: [Function: jsonParser],
                            name: 'jsonParser',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                            route: undefined },
                          { handle: [Function: mounted_app],
                            name: 'mounted_app',
                            params: {},
                            path: '',
                            keys: [],
                            regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                            route: undefined } ] } },
                 connection: [Function: connectionListener],
                 clientError: [Function] },
              _maxListeners: 10,
              _connections: 1,
              connections: [Getter/Setter],
              _handle:
               { fd: 12,
                 writeQueueSize: 0,
                 onconnection: [Function: onconnection],
                 owner: [Circular] },
              _usingSlaves: false,
              _slaves: [],
              allowHalfOpen: true,
              httpAllowHalfOpen: false,
              timeout: 120000,
              _connectionKey: '4:0.0.0.0:0' },
           _idleTimeout: 120000,
           _idleNext: [Circular],
           _idlePrev:
            { _idleNext: [Circular],
              _idlePrev: [Circular] },
           _idleStart: 1414446075741,
           _monotonicStartTime: 66686409,
           parser:
            { _headers: [],
              _url: '',
              onHeaders: [Function: parserOnHeaders],
              onHeadersComplete: [Function: parserOnHeadersComplete],
              onBody: [Function: parserOnBody],
              onMessageComplete: [Function: parserOnMessageComplete],
              socket: [Circular],
              incoming:
               { _readableState:
                  { highWaterMark: 16384,
                    buffer: [],
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: false,
                    ended: true,
                    endEmitted: true,
                    reading: false,
                    calledRead: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    objectMode: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: false,
                 domain: null,
                 _events: { readable: [Function] },
                 _maxListeners: 10,
                 socket: [Circular],
                 connection: [Circular],
                 httpVersion: '1.1',
                 complete: true,
                 headers:
                  { host: '127.0.0.1:51893',
                    'accept-encoding': 'gzip, deflate',
                    cookie: '',
                    'user-agent': 'node-superagent/0.18.0',
                    'content-type': 'application/json',
                    'content-length': '132',
                    connection: 'close' },
                 trailers: {},
                 _pendings: [],
                 _pendingIndex: 0,
                 url: '/notas/1414446075727',
                 method: 'PUT',
                 statusCode: null,
                 client: [Circular],
                 _consuming: true,
                 _dumped: false,
                 httpVersionMajor: 1,
                 httpVersionMinor: 1,
                 upgrade: false,
                 next: [Function: next],
                 baseUrl: '',
                 originalUrl: '/notas/1414446075727',
                 _parsedUrl:
                  { protocol: null,
                    slashes: null,
                    auth: null,
                    host: null,
                    port: null,
                    hostname: null,
                    hash: null,
                    search: null,
                    query: null,
                    pathname: '/notas/1414446075727',
                    path: '/notas/1414446075727',
                    href: '/notas/1414446075727',
                    _raw: '/notas/1414446075727' },
                 params: { id: '1414446075727' },
                 query: {},
                 res:
                  { domain: null,
                    _events: { finish: [Function] },
                    _maxListeners: 10,
                    output: [],
                    outputEncodings: [],
                    writable: true,
                    _last: false,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    useChunkedEncodingByDefault: true,
                    sendDate: true,
                    _headerSent: false,
                    _header: '',
                    _hasBody: true,
                    _trailer: '',
                    finished: false,
                    _hangupClose: false,
                    socket: [Circular],
                    connection: [Circular],
                    _headers:
                     { 'x-powered-by': 'Express',
                       'content-type': 'application/json' },
                    _headerNames:
                     { 'x-powered-by': 'X-Powered-By',
                       'content-type': 'Content-Type' },
                    req: [Circular],
                    locals: {} },
                 body:
                  { title: 'Nota actualizada Kwan',
                    description: 'Introduccion a clase',
                    type: 'js',
                    body: 'soy el cuerpo de json',
                    id: 1414446075727 },
                 _body: true,
                 pipe: [Function],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 pause: [Function],
                 resume: [Function],
                 read: [Function],
                 route:
                  { path: '/notas/:id?',
                    stack:
                     [ { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/?$/i,
                         method: undefined },
                       { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/?$/i,
                         method: 'post' },
                       { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/?$/i,
                         method: 'get' },
                       { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/?$/i,
                         method: 'put' } ],
                    methods:
                     { _all: true,
                       post: true,
                       get: true,
                       put: true } } },
              maxHeaderPairs: 2000,
              onIncoming: [Function] },
           ondata: [Function],
           _paused: false,
           _httpMessage:
            { domain: null,
              _events: { finish: [Function] },
              _maxListeners: 10,
              output: [],
              outputEncodings: [],
              writable: true,
              _last: false,
              chunkedEncoding: false,
              shouldKeepAlive: false,
              useChunkedEncodingByDefault: true,
              sendDate: true,
              _headerSent: false,
              _header: '',
              _hasBody: true,
              _trailer: '',
              finished: false,
              _hangupClose: false,
              socket: [Circular],
              connection: [Circular],
              _headers:
               { 'x-powered-by': 'Express',
                 'content-type': 'application/json' },
              _headerNames:
               { 'x-powered-by': 'X-Powered-By',
                 'content-type': 'Content-Type' },
              req:
               { _readableState:
                  { highWaterMark: 16384,
                    buffer: [],
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: false,
                    ended: true,
                    endEmitted: true,
                    reading: false,
                    calledRead: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    objectMode: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: false,
                 domain: null,
                 _events: { readable: [Function] },
                 _maxListeners: 10,
                 socket: [Circular],
                 connection: [Circular],
                 httpVersion: '1.1',
                 complete: true,
                 headers:
                  { host: '127.0.0.1:51893',
                    'accept-encoding': 'gzip, deflate',
                    cookie: '',
                    'user-agent': 'node-superagent/0.18.0',
                    'content-type': 'application/json',
                    'content-length': '132',
                    connection: 'close' },
                 trailers: {},
                 _pendings: [],
                 _pendingIndex: 0,
                 url: '/notas/1414446075727',
                 method: 'PUT',
                 statusCode: null,
                 client: [Circular],
                 _consuming: true,
                 _dumped: false,
                 httpVersionMajor: 1,
                 httpVersionMinor: 1,
                 upgrade: false,
                 next: [Function: next],
                 baseUrl: '',
                 originalUrl: '/notas/1414446075727',
                 _parsedUrl:
                  { protocol: null,
                    slashes: null,
                    auth: null,
                    host: null,
                    port: null,
                    hostname: null,
                    hash: null,
                    search: null,
                    query: null,
                    pathname: '/notas/1414446075727',
                    path: '/notas/1414446075727',
                    href: '/notas/1414446075727',
                    _raw: '/notas/1414446075727' },
                 params: { id: '1414446075727' },
                 query: {},
                 res: [Circular],
                 body:
                  { title: 'Nota actualizada Kwan',
                    description: 'Introduccion a clase',
                    type: 'js',
                    body: 'soy el cuerpo de json',
                    id: 1414446075727 },
                 _body: true,
                 pipe: [Function],
                 addListener: [Function: addListener],
                 on: [Function: addListener],
                 pause: [Function],
                 resume: [Function],
                 read: [Function],
                 route:
                  { path: '/notas/:id?',
                    stack:
                     [ { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/?$/i,
                         method: undefined },
                       { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/?$/i,
                         method: 'post' },
                       { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/?$/i,
                         method: 'get' },
                       { handle: [Function],
                         name: '<anonymous>',
                         params: undefined,
                         path: undefined,
                         keys: [],
                         regexp: /^\/?$/i,
                         method: 'put' } ],
                    methods:
                     { _all: true,
                       post: true,
                       get: true,
                       put: true } } },
              locals: {} } },
        _idleStart: 1414446075730,
        _monotonicStartTime: 66686398 },
     _idlePrev:
      { _idleNext: { '$ref': '$["socket"]' },
        _idlePrev:
         { [Function: utcDate]
           _onTimeout: [Function],
           _idleTimeout: 271,
           _idleNext:
            { _idleNext:
               { _connecting: false,
                 _handle:
                  { fd: 14,
                    writeQueueSize: 0,
                    owner: [Circular],
                    onread: [Function: onread],
                    reading: true },
                 _readableState:
                  { highWaterMark: 16384,
                    buffer: [],
                    length: 0,
                    pipes: null,
                    pipesCount: 0,
                    flowing: false,
                    ended: false,
                    endEmitted: false,
                    reading: true,
                    calledRead: true,
                    sync: false,
                    needReadable: true,
                    emittedReadable: false,
                    readableListening: false,
                    objectMode: false,
                    defaultEncoding: 'utf8',
                    ranOut: false,
                    awaitDrain: 0,
                    readingMore: false,
                    decoder: null,
                    encoding: null },
                 readable: true,
                 domain: null,
                 _events:
                  { end: { [Function: g] listener: [Function: onend] },
                    finish: [Function: onSocketFinish],
                    _socketEnd: [Function: onSocketEnd],
                    drain:
                     [ [Function: ondrain],
                       [Function: socketOnDrain] ],
                    timeout: [Function],
                    error: [Function],
                    close:
                     [ [Function: serverSocketCloseListener],
                       [Function: onServerResponseClose] ] },
                 _maxListeners: 10,
                 _writableState:
                  { highWaterMark: 16384,
                    objectMode: false,
                    needDrain: false,
                    ending: false,
                    ended: false,
                    finished: false,
                    decodeStrings: false,
                    defaultEncoding: 'utf8',
                    length: 0,
                    writing: false,
                    sync: true,
                    bufferProcessing: false,
                    onwrite: [Function],
                    writecb: null,
                    writelen: 0,
                    buffer: [],
                    errorEmitted: false },
                 writable: true,
                 allowHalfOpen: true,
                 onend: [Function],
                 destroyed: false,
                 bytesRead: 342,
                 _bytesDispatched: 0,
                 _pendingData: null,
                 _pendingEncoding: '',
                 server:
                  { domain: null,
                    _events:
                     { request:
                        { [Function]
                          init: [Function],
                          defaultConfiguration: [Function],
                          lazyrouter: [Function],
                          handle: [Function],
                          use: [Function: use],
                          route: [Function],
                          engine: [Function],
                          param: [Function],
                          set: [Function],
                          path: [Function],
                          enabled: [Function],
                          disabled: [Function],
                          enable: [Function],
                          disable: [Function],
                          get: [Function],
                          post: [Function],
                          put: [Function],
                          head: [Function],
                          delete: [Function],
                          options: [Function],
                          trace: [Function],
                          copy: [Function],
                          lock: [Function],
                          mkcol: [Function],
                          move: [Function],
                          purge: [Function],
                          propfind: [Function],
                          proppatch: [Function],
                          unlock: [Function],
                          report: [Function],
                          mkactivity: [Function],
                          checkout: [Function],
                          merge: [Function],
                          'm-search': [Function],
                          notify: [Function],
                          subscribe: [Function],
                          unsubscribe: [Function],
                          patch: [Function],
                          search: [Function],
                          connect: [Function],
                          all: [Function],
                          del: [Function],
                          render: [Function],
                          listen: [Function],
                          setMaxListeners: [Function: setMaxListeners],
                          emit: [Function: emit],
                          addListener: [Function: addListener],
                          on: [Function: addListener],
                          once: [Function: once],
                          removeListener: [Function: removeListener],
                          removeAllListeners: [Function: removeAllListeners],
                          listeners: [Function: listeners],
                          request: { app: [Circular] },
                          response: { app: [Circular] },
                          cache: {},
                          settings:
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                             'jsonp callback name': 'callback' },
                          engines: {},
                          _events: { mount: [Function] },
                          locals:
                           { settings:
                              { 'x-powered-by': true,
                                etag: 'weak',
                                'etag fn': [Function: wetag],
                                env: 'development',
                                'query parser': 'extended',
                                'query parser fn': [Function],
                                'subdomain offset': 2,
                                'trust proxy': false,
                                'trust proxy fn': [Function: trustNone],
                                view: [Function: View],
                                views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                                'jsonp callback name': 'callback' } },
                          mountpath: '/',
                          _router:
                           { [Function: router]
                             params: {},
                             _params: [],
                             caseSensitive: false,
                             mergeParams: undefined,
                             strict: false,
                             stack:
                              [ { handle: [Function: query],
                                  name: 'query',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                                  route: undefined },
                                { handle: [Function: expressInit],
                                  name: 'expressInit',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                                  route: undefined },
                                { handle: [Function: jsonParser],
                                  name: 'jsonParser',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                                  route: undefined },
                                { handle: [Function: mounted_app],
                                  name: 'mounted_app',
                                  params: {},
                                  path: '',
                                  keys: [],
                                  regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                                  route: undefined } ] } },
                       connection: [Function: connectionListener],
                       clientError: [Function] },
                    _maxListeners: 10,
                    _connections: 1,
                    connections: [Getter/Setter],
                    _handle:
                     { fd: 12,
                       writeQueueSize: 0,
                       onconnection: [Function: onconnection],
                       owner: [Circular] },
                    _usingSlaves: false,
                    _slaves: [],
                    allowHalfOpen: true,
                    httpAllowHalfOpen: false,
                    timeout: 120000,
                    _connectionKey: '4:0.0.0.0:0' },
                 _idleTimeout: 120000,
                 _idleNext: [Circular],
                 _idlePrev: [Circular],
                 _idleStart: 1414446075741,
                 _monotonicStartTime: 66686409,
                 parser:
                  { _headers: [],
                    _url: '',
                    onHeaders: [Function: parserOnHeaders],
                    onHeadersComplete: [Function: parserOnHeadersComplete],
                    onBody: [Function: parserOnBody],
                    onMessageComplete: [Function: parserOnMessageComplete],
                    socket: [Circular],
                    incoming:
                     { _readableState:
                        { highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: false,
                          ended: true,
                          endEmitted: true,
                          reading: false,
                          calledRead: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          objectMode: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: false,
                       domain: null,
                       _events: { readable: [Function] },
                       _maxListeners: 10,
                       socket: [Circular],
                       connection: [Circular],
                       httpVersion: '1.1',
                       complete: true,
                       headers:
                        { host: '127.0.0.1:51893',
                          'accept-encoding': 'gzip, deflate',
                          cookie: '',
                          'user-agent': 'node-superagent/0.18.0',
                          'content-type': 'application/json',
                          'content-length': '132',
                          connection: 'close' },
                       trailers: {},
                       _pendings: [],
                       _pendingIndex: 0,
                       url: '/notas/1414446075727',
                       method: 'PUT',
                       statusCode: null,
                       client: [Circular],
                       _consuming: true,
                       _dumped: false,
                       httpVersionMajor: 1,
                       httpVersionMinor: 1,
                       upgrade: false,
                       next: [Function: next],
                       baseUrl: '',
                       originalUrl: '/notas/1414446075727',
                       _parsedUrl:
                        { protocol: null,
                          slashes: null,
                          auth: null,
                          host: null,
                          port: null,
                          hostname: null,
                          hash: null,
                          search: null,
                          query: null,
                          pathname: '/notas/1414446075727',
                          path: '/notas/1414446075727',
                          href: '/notas/1414446075727',
                          _raw: '/notas/1414446075727' },
                       params: { id: '1414446075727' },
                       query: {},
                       res:
                        { domain: null,
                          _events: { finish: [Function] },
                          _maxListeners: 10,
                          output: [],
                          outputEncodings: [],
                          writable: true,
                          _last: false,
                          chunkedEncoding: false,
                          shouldKeepAlive: false,
                          useChunkedEncodingByDefault: true,
                          sendDate: true,
                          _headerSent: false,
                          _header: '',
                          _hasBody: true,
                          _trailer: '',
                          finished: false,
                          _hangupClose: false,
                          socket: [Circular],
                          connection: [Circular],
                          _headers:
                           { 'x-powered-by': 'Express',
                             'content-type': 'application/json' },
                          _headerNames:
                           { 'x-powered-by': 'X-Powered-By',
                             'content-type': 'Content-Type' },
                          req: [Circular],
                          locals: {} },
                       body:
                        { title: 'Nota actualizada Kwan',
                          description: 'Introduccion a clase',
                          type: 'js',
                          body: 'soy el cuerpo de json',
                          id: 1414446075727 },
                       _body: true,
                       pipe: [Function],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       pause: [Function],
                       resume: [Function],
                       read: [Function],
                       route:
                        { path: '/notas/:id?',
                          stack:
                           [ { handle: [Function],
                               name: '<anonymous>',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: /^\/?$/i,
                               method: undefined },
                             { handle: [Function],
                               name: '<anonymous>',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: /^\/?$/i,
                               method: 'post' },
                             { handle: [Function],
                               name: '<anonymous>',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: /^\/?$/i,
                               method: 'get' },
                             { handle: [Function],
                               name: '<anonymous>',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: /^\/?$/i,
                               method: 'put' } ],
                          methods:
                           { _all: true,
                             post: true,
                             get: true,
                             put: true } } },
                    maxHeaderPairs: 2000,
                    onIncoming: [Function] },
                 ondata: [Function],
                 _paused: false,
                 _httpMessage:
                  { domain: null,
                    _events: { finish: [Function] },
                    _maxListeners: 10,
                    output: [],
                    outputEncodings: [],
                    writable: true,
                    _last: false,
                    chunkedEncoding: false,
                    shouldKeepAlive: false,
                    useChunkedEncodingByDefault: true,
                    sendDate: true,
                    _headerSent: false,
                    _header: '',
                    _hasBody: true,
                    _trailer: '',
                    finished: false,
                    _hangupClose: false,
                    socket: [Circular],
                    connection: [Circular],
                    _headers:
                     { 'x-powered-by': 'Express',
                       'content-type': 'application/json' },
                    _headerNames:
                     { 'x-powered-by': 'X-Powered-By',
                       'content-type': 'Content-Type' },
                    req:
                     { _readableState:
                        { highWaterMark: 16384,
                          buffer: [],
                          length: 0,
                          pipes: null,
                          pipesCount: 0,
                          flowing: false,
                          ended: true,
                          endEmitted: true,
                          reading: false,
                          calledRead: true,
                          sync: false,
                          needReadable: true,
                          emittedReadable: false,
                          readableListening: false,
                          objectMode: false,
                          defaultEncoding: 'utf8',
                          ranOut: false,
                          awaitDrain: 0,
                          readingMore: false,
                          decoder: null,
                          encoding: null },
                       readable: false,
                       domain: null,
                       _events: { readable: [Function] },
                       _maxListeners: 10,
                       socket: [Circular],
                       connection: [Circular],
                       httpVersion: '1.1',
                       complete: true,
                       headers:
                        { host: '127.0.0.1:51893',
                          'accept-encoding': 'gzip, deflate',
                          cookie: '',
                          'user-agent': 'node-superagent/0.18.0',
                          'content-type': 'application/json',
                          'content-length': '132',
                          connection: 'close' },
                       trailers: {},
                       _pendings: [],
                       _pendingIndex: 0,
                       url: '/notas/1414446075727',
                       method: 'PUT',
                       statusCode: null,
                       client: [Circular],
                       _consuming: true,
                       _dumped: false,
                       httpVersionMajor: 1,
                       httpVersionMinor: 1,
                       upgrade: false,
                       next: [Function: next],
                       baseUrl: '',
                       originalUrl: '/notas/1414446075727',
                       _parsedUrl:
                        { protocol: null,
                          slashes: null,
                          auth: null,
                          host: null,
                          port: null,
                          hostname: null,
                          hash: null,
                          search: null,
                          query: null,
                          pathname: '/notas/1414446075727',
                          path: '/notas/1414446075727',
                          href: '/notas/1414446075727',
                          _raw: '/notas/1414446075727' },
                       params: { id: '1414446075727' },
                       query: {},
                       res: [Circular],
                       body:
                        { title: 'Nota actualizada Kwan',
                          description: 'Introduccion a clase',
                          type: 'js',
                          body: 'soy el cuerpo de json',
                          id: 1414446075727 },
                       _body: true,
                       pipe: [Function],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       pause: [Function],
                       resume: [Function],
                       read: [Function],
                       route:
                        { path: '/notas/:id?',
                          stack:
                           [ { handle: [Function],
                               name: '<anonymous>',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: /^\/?$/i,
                               method: undefined },
                             { handle: [Function],
                               name: '<anonymous>',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: /^\/?$/i,
                               method: 'post' },
                             { handle: [Function],
                               name: '<anonymous>',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: /^\/?$/i,
                               method: 'get' },
                             { handle: [Function],
                               name: '<anonymous>',
                               params: undefined,
                               path: undefined,
                               keys: [],
                               regexp: /^\/?$/i,
                               method: 'put' } ],
                          methods:
                           { _all: true,
                             post: true,
                             get: true,
                             put: true } } },
                    locals: {} } },
              _idlePrev: [Circular] },
           _idlePrev:
            { _connecting: false,
              _handle:
               { fd: 14,
                 writeQueueSize: 0,
                 owner: [Circular],
                 onread: [Function: onread],
                 reading: true },
              _readableState:
               { highWaterMark: 16384,
                 buffer: [],
                 length: 0,
                 pipes: null,
                 pipesCount: 0,
                 flowing: false,
                 ended: false,
                 endEmitted: false,
                 reading: true,
                 calledRead: true,
                 sync: false,
                 needReadable: true,
                 emittedReadable: false,
                 readableListening: false,
                 objectMode: false,
                 defaultEncoding: 'utf8',
                 ranOut: false,
                 awaitDrain: 0,
                 readingMore: false,
                 decoder: null,
                 encoding: null },
              readable: true,
              domain: null,
              _events:
               { end: { [Function: g] listener: [Function: onend] },
                 finish: [Function: onSocketFinish],
                 _socketEnd: [Function: onSocketEnd],
                 drain:
                  [ [Function: ondrain],
                    [Function: socketOnDrain] ],
                 timeout: [Function],
                 error: [Function],
                 close:
                  [ [Function: serverSocketCloseListener],
                    [Function: onServerResponseClose] ] },
              _maxListeners: 10,
              _writableState:
               { highWaterMark: 16384,
                 objectMode: false,
                 needDrain: false,
                 ending: false,
                 ended: false,
                 finished: false,
                 decodeStrings: false,
                 defaultEncoding: 'utf8',
                 length: 0,
                 writing: false,
                 sync: true,
                 bufferProcessing: false,
                 onwrite: [Function],
                 writecb: null,
                 writelen: 0,
                 buffer: [],
                 errorEmitted: false },
              writable: true,
              allowHalfOpen: true,
              onend: [Function],
              destroyed: false,
              bytesRead: 342,
              _bytesDispatched: 0,
              _pendingData: null,
              _pendingEncoding: '',
              server:
               { domain: null,
                 _events:
                  { request:
                     { [Function]
                       init: [Function],
                       defaultConfiguration: [Function],
                       lazyrouter: [Function],
                       handle: [Function],
                       use: [Function: use],
                       route: [Function],
                       engine: [Function],
                       param: [Function],
                       set: [Function],
                       path: [Function],
                       enabled: [Function],
                       disabled: [Function],
                       enable: [Function],
                       disable: [Function],
                       get: [Function],
                       post: [Function],
                       put: [Function],
                       head: [Function],
                       delete: [Function],
                       options: [Function],
                       trace: [Function],
                       copy: [Function],
                       lock: [Function],
                       mkcol: [Function],
                       move: [Function],
                       purge: [Function],
                       propfind: [Function],
                       proppatch: [Function],
                       unlock: [Function],
                       report: [Function],
                       mkactivity: [Function],
                       checkout: [Function],
                       merge: [Function],
                       'm-search': [Function],
                       notify: [Function],
                       subscribe: [Function],
                       unsubscribe: [Function],
                       patch: [Function],
                       search: [Function],
                       connect: [Function],
                       all: [Function],
                       del: [Function],
                       render: [Function],
                       listen: [Function],
                       setMaxListeners: [Function: setMaxListeners],
                       emit: [Function: emit],
                       addListener: [Function: addListener],
                       on: [Function: addListener],
                       once: [Function: once],
                       removeListener: [Function: removeListener],
                       removeAllListeners: [Function: removeAllListeners],
                       listeners: [Function: listeners],
                       request: { app: [Circular] },
                       response: { app: [Circular] },
                       cache: {},
                       settings:
                        { 'x-powered-by': true,
                          etag: 'weak',
                          'etag fn': [Function: wetag],
                          env: 'development',
                          'query parser': 'extended',
                          'query parser fn': [Function],
                          'subdomain offset': 2,
                          'trust proxy': false,
                          'trust proxy fn': [Function: trustNone],
                          view: [Function: View],
                          views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                          'jsonp callback name': 'callback' },
                       engines: {},
                       _events: { mount: [Function] },
                       locals:
                        { settings:
                           { 'x-powered-by': true,
                             etag: 'weak',
                             'etag fn': [Function: wetag],
                             env: 'development',
                             'query parser': 'extended',
                             'query parser fn': [Function],
                             'subdomain offset': 2,
                             'trust proxy': false,
                             'trust proxy fn': [Function: trustNone],
                             view: [Function: View],
                             views: '/Users/andreskwano/Documents/workspace/nodejs/node-pro-m.la/views',
                             'jsonp callback name': 'callback' } },
                       mountpath: '/',
                       _router:
                        { [Function: router]
                          params: {},
                          _params: [],
                          caseSensitive: false,
                          mergeParams: undefined,
                          strict: false,
                          stack:
                           [ { handle: [Function: query],
                               name: 'query',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                               route: undefined },
                             { handle: [Function: expressInit],
                               name: 'expressInit',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                               route: undefined },
                             { handle: [Function: jsonParser],
                               name: 'jsonParser',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                               route: undefined },
                             { handle: [Function: mounted_app],
                               name: 'mounted_app',
                               params: {},
                               path: '',
                               keys: [],
                               regexp: { /^\/?(?=\/|$)/i fast_slash: true },
                               route: undefined } ] } },
                    connection: [Function: connectionListener],
                    clientError: [Function] },
                 _maxListeners: 10,
                 _connections: 1,
                 connections: [Getter/Setter],
                 _handle:
                  { fd: 12,
                    writeQueueSize: 0,
                    onconnection: [Function: onconnection],
                    owner: [Circular] },
                 _usingSlaves: false,
                 _slaves: [],
                 allowHalfOpen: true,
                 httpAllowHalfOpen: false,
                 timeout: 120000,
                 _connectionKey: '4:0.0.0.0:0' },
              _idleTimeout: 120000,
              _idleNext: [Circular],
              _idlePrev:
               { _idleNext: [Circular],
                 _idlePrev: [Circular] },
              _idleStart: 1414446075741,
              _monotonicStartTime: 66686409,
              parser:
               { _headers: [],
                 _url: '',
                 onHeaders: [Function: parserOnHeaders],
                 onHeadersComplete: [Function: parserOnHeadersComplete],
                 onBody: [Function: parserOnBody],
                 onMessageComplete: [Function: parserOnMessageComplete],
                 socket: [Circular],
                 incoming:
                  { _readableState:
                     { highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: false,
                       ended: true,
                       endEmitted: true,
                       reading: false,
                       calledRead: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       objectMode: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: false,
                    domain: null,
                    _events: { readable: [Function] },
                    _maxListeners: 10,
                    socket: [Circular],
                    connection: [Circular],
                    httpVersion: '1.1',
                    complete: true,
                    headers:
                     { host: '127.0.0.1:51893',
                       'accept-encoding': 'gzip, deflate',
                       cookie: '',
                       'user-agent': 'node-superagent/0.18.0',
                       'content-type': 'application/json',
                       'content-length': '132',
                       connection: 'close' },
                    trailers: {},
                    _pendings: [],
                    _pendingIndex: 0,
                    url: '/notas/1414446075727',
                    method: 'PUT',
                    statusCode: null,
                    client: [Circular],
                    _consuming: true,
                    _dumped: false,
                    httpVersionMajor: 1,
                    httpVersionMinor: 1,
                    upgrade: false,
                    next: [Function: next],
                    baseUrl: '',
                    originalUrl: '/notas/1414446075727',
                    _parsedUrl:
                     { protocol: null,
                       slashes: null,
                       auth: null,
                       host: null,
                       port: null,
                       hostname: null,
                       hash: null,
                       search: null,
                       query: null,
                       pathname: '/notas/1414446075727',
                       path: '/notas/1414446075727',
                       href: '/notas/1414446075727',
                       _raw: '/notas/1414446075727' },
                    params: { id: '1414446075727' },
                    query: {},
                    res:
                     { domain: null,
                       _events: { finish: [Function] },
                       _maxListeners: 10,
                       output: [],
                       outputEncodings: [],
                       writable: true,
                       _last: false,
                       chunkedEncoding: false,
                       shouldKeepAlive: false,
                       useChunkedEncodingByDefault: true,
                       sendDate: true,
                       _headerSent: false,
                       _header: '',
                       _hasBody: true,
                       _trailer: '',
                       finished: false,
                       _hangupClose: false,
                       socket: [Circular],
                       connection: [Circular],
                       _headers:
                        { 'x-powered-by': 'Express',
                          'content-type': 'application/json' },
                       _headerNames:
                        { 'x-powered-by': 'X-Powered-By',
                          'content-type': 'Content-Type' },
                       req: [Circular],
                       locals: {} },
                    body:
                     { title: 'Nota actualizada Kwan',
                       description: 'Introduccion a clase',
                       type: 'js',
                       body: 'soy el cuerpo de json',
                       id: 1414446075727 },
                    _body: true,
                    pipe: [Function],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    pause: [Function],
                    resume: [Function],
                    read: [Function],
                    route:
                     { path: '/notas/:id?',
                       stack:
                        [ { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: undefined },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'post' },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'get' },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'put' } ],
                       methods:
                        { _all: true,
                          post: true,
                          get: true,
                          put: true } } },
                 maxHeaderPairs: 2000,
                 onIncoming: [Function] },
              ondata: [Function],
              _paused: false,
              _httpMessage:
               { domain: null,
                 _events: { finish: [Function] },
                 _maxListeners: 10,
                 output: [],
                 outputEncodings: [],
                 writable: true,
                 _last: false,
                 chunkedEncoding: false,
                 shouldKeepAlive: false,
                 useChunkedEncodingByDefault: true,
                 sendDate: true,
                 _headerSent: false,
                 _header: '',
                 _hasBody: true,
                 _trailer: '',
                 finished: false,
                 _hangupClose: false,
                 socket: [Circular],
                 connection: [Circular],
                 _headers:
                  { 'x-powered-by': 'Express',
                    'content-type': 'application/json' },
                 _headerNames:
                  { 'x-powered-by': 'X-Powered-By',
                    'content-type': 'Content-Type' },
                 req:
                  { _readableState:
                     { highWaterMark: 16384,
                       buffer: [],
                       length: 0,
                       pipes: null,
                       pipesCount: 0,
                       flowing: false,
                       ended: true,
                       endEmitted: true,
                       reading: false,
                       calledRead: true,
                       sync: false,
                       needReadable: true,
                       emittedReadable: false,
                       readableListening: false,
                       objectMode: false,
                       defaultEncoding: 'utf8',
                       ranOut: false,
                       awaitDrain: 0,
                       readingMore: false,
                       decoder: null,
                       encoding: null },
                    readable: false,
                    domain: null,
                    _events: { readable: [Function] },
                    _maxListeners: 10,
                    socket: [Circular],
                    connection: [Circular],
                    httpVersion: '1.1',
                    complete: true,
                    headers:
                     { host: '127.0.0.1:51893',
                       'accept-encoding': 'gzip, deflate',
                       cookie: '',
                       'user-agent': 'node-superagent/0.18.0',
                       'content-type': 'application/json',
                       'content-length': '132',
                       connection: 'close' },
                    trailers: {},
                    _pendings: [],
                    _pendingIndex: 0,
                    url: '/notas/1414446075727',
                    method: 'PUT',
                    statusCode: null,
                    client: [Circular],
                    _consuming: true,
                    _dumped: false,
                    httpVersionMajor: 1,
                    httpVersionMinor: 1,
                    upgrade: false,
                    next: [Function: next],
                    baseUrl: '',
                    originalUrl: '/notas/1414446075727',
                    _parsedUrl:
                     { protocol: null,
                       slashes: null,
                       auth: null,
                       host: null,
                       port: null,
                       hostname: null,
                       hash: null,
                       search: null,
                       query: null,
                       pathname: '/notas/1414446075727',
                       path: '/notas/1414446075727',
                       href: '/notas/1414446075727',
                       _raw: '/notas/1414446075727' },
                    params: { id: '1414446075727' },
                    query: {},
                    res: [Circular],
                    body:
                     { title: 'Nota actualizada Kwan',
                       description: 'Introduccion a clase',
                       type: 'js',
                       body: 'soy el cuerpo de json',
                       id: 1414446075727 },
                    _body: true,
                    pipe: [Function],
                    addListener: [Function: addListener],
                    on: [Function: addListener],
                    pause: [Function],
                    resume: [Function],
                    read: [Function],
                    route:
                     { path: '/notas/:id?',
                       stack:
                        [ { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: undefined },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'post' },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'get' },
                          { handle: [Function],
                            name: '<anonymous>',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i,
                            method: 'put' } ],
                       methods:
                        { _all: true,
                          post: true,
                          get: true,
                          put: true } } },
                 locals: {} } },
           _idleStart: 1414446075730,
           _monotonicStartTime: 66686398 } },
     _idleStart: 1414446075741,
     _monotonicStartTime: 66686409,
     parser:
      { _headers: [],
        _url: '',
        onHeaders: [Function: parserOnHeaders],
        onHeadersComplete: [Function: parserOnHeadersComplete],
        onBody: [Function: parserOnBody],
        onMessageComplete: [Function: parserOnMessageComplete],
        socket: { '$ref': '$["socket"]' },
        incoming: { '$ref': '$' },
        maxHeaderPairs: 2000,
        onIncoming: [Function] },
     ondata: [Function],
     _paused: false,
     _httpMessage:
      { domain: null,
        _events: { finish: [Function] },
        _maxListeners: 10,
        output: [],
        outputEncodings: [],
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _headerSent: false,
        _header: '',
        _hasBody: true,
        _trailer: '',
        finished: false,
        _hangupClose: false,
        socket: { '$ref': '$["socket"]' },
        connection: { '$ref': '$["socket"]' },
        _headers:
         { 'x-powered-by': 'Express',
           'content-type': 'application/json' },
        _headerNames:
         { 'x-powered-by': 'X-Powered-By',
           'content-type': 'Content-Type' },
        req: { '$ref': '$' },
        locals: {} } },
  connection: { '$ref': '$["socket"]' },
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: '127.0.0.1:51893',
     'accept-encoding': 'gzip, deflate',
     cookie: '',
     'user-agent': 'node-superagent/0.18.0',
     'content-type': 'application/json',
     'content-length': '132',
     connection: 'close' },
  trailers: {},
  _pendings: [],
  _pendingIndex: 0,
  url: '/notas/1414446075727',
  method: 'PUT',
  statusCode: null,
  client: { '$ref': '$["socket"]' },
  _consuming: true,
  _dumped: false,
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  upgrade: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/notas/1414446075727',
  _parsedUrl:
   { protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/notas/1414446075727',
     path: '/notas/1414446075727',
     href: '/notas/1414446075727',
     _raw: '/notas/1414446075727' },
  params: { id: '1414446075727' },
  query: {},
  res: { '$ref': '$["socket"]["_httpMessage"]' },
  body:
   { title: 'Nota actualizada Kwan',
     description: 'Introduccion a clase',
     type: 'js',
     body: 'soy el cuerpo de json',
     id: 1414446075727 },
  _body: true,
  pipe: [Function],
  addListener: [Function: addListener],
  on: [Function: addListener],
  pause: [Function],
  resume: [Function],
  read: [Function],
  route:
   { path: '/notas/:id?',
     stack:
      [ { handle: [Function],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i,
          method: undefined },
        { handle: [Function],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i,
          method: 'post' },
        { handle: [Function],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i,
          method: 'get' },
        { handle: [Function],
          name: '<anonymous>',
          params: undefined,
          path: undefined,
          keys: [],
          regexp: /^\/?$/i,
          method: 'put' } ],
     methods:
      { _all: true,
        post: true,
        get: true,
        put: true } } }